algo swap(a,b)
    temp=a   # 1 unit
    a=b      # 1 unit
    b=temp   # 1 unit

Time complexity is o(1)

Sum fo elements inside an array

algo sum(A,n)
    sum=0   # 1 unit
    for (i=0;i<n;i+1)  # 1 unit, n+1 unit, n unit ---> n+1 unit
        sum=sum+A[i]   # n unit
    returm sum # 1 unit

# f(n)= 2n+3 --> o(n)
# Space: no. of variables A(n unit), i(1 unit) , n(1 unit), sum(1 unit)
# f(n)= n+3 --> o(n)

algo sum(A,B,n)
    for(i=0; i < n; i++) # n+1
        for(j=0;j < n; j++) # n * n+1
            C[i][j] = A[i][j] + B[i][j] # n * n

# f(n) = 2n^2 + 2n + 1 --> o(n^2)
# Space: 
A - n^2
B - n^2
C - n^2
n - 1
i - 1
f(n): 3n^2 + 2 --> o(n^2)

for(i=1; i<n; i+=2)
    stmt # n/2 unit
# f(n): n/2 --> o(n)


for(i=0;i<n;i++)
    for(j=0;j<i;j++)
        stmt

i   j   stmt
0   x   x
1   0   1
    x   x
2   0   1
    1   1+1
3   0   1
    1   1+1
    2   1+1+1

f(n): 1+2+3...+n= n(n+1)/2---> o(n) = n^2

p=0
for(i=1;p<n;i++)
    p=p+i

i   p
1   0+1
2   1+2
3   1+2+3
k   1+2+3+..+k

f(n)= 1+2+3+..+k = k(k+1)/2 
k(k+1)/2 > n find k


for(i=1;i<n;i**2)
    stmt
i   stmt
1   1
2   2
4   3
8   4
2^k 

#2^k>n find n

for (i=n;i>=1;i=i/2)
    stmt

# i= n,n/2,n/4,n/8.. n/2^k <=1 , find k

for(i=0;i*i<n;i++)
    stmt

# i=0,1,2,3...k, => k^2>n, find k

a=1
while(a<b)
    stmt
    a=a*2

#a -> 1,2,2*2,4*2,8*2,...,2^k >= b find k

